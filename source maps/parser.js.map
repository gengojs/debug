{"version":3,"sources":["parser.js"],"names":[],"mappings":";;;;;;;;;;;;sBAAc,QAAQ;;;;;;;;;IAMhB,MAAM;AACC,WADP,MAAM,CACE,KAAK,EAAE;0BADf,MAAM;;AAER,QAAI,CAAC,MAAM,GAAG,EAAE,CAAC;AACjB,QAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;GACnB;;eAJG,MAAM;;WAKL,eAAC,KAAK,EAAE;AACX,WAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACzB,UAAI,CAAC,MAAM,GAAG,oBAAE,OAAO,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,CAAC,CAAC;AACjD,aAAO,IAAI,CAAC;KACb;;;WACO,kBAAC,KAAK,EAAE;AACd,aAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;KACxC;;;SAZG,MAAM;;;qBAeG,MAAM","file":"parser.js","sourcesContent":["import _ from 'lodash';\n\n/**\n * This class parses the process.env.Debug\n * @class Parser\n */\nclass Parser {\n  constructor(debug) {\n    this.parsed = [];\n    this.parse(debug);\n  }\n  parse(debug) {\n    debug = debug.split(',');\n    this.parsed = _.isArray(debug) ? debug : [debug];\n    return this;\n  }\n  hasLevel(level) {\n    return this.parsed.indexOf(level) > -1;\n  }\n}\n\nexport default Parser;"],"sourceRoot":"/source/"}